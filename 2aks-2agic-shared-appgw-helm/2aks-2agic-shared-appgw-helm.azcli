# Two AKS Clusters with one shared Application Gateway and AGIC deployed through Helm Chart on each aks cluster

# Variables
rg='2aks-2agic-shared-1appgw'
location='uaenorth'
aks_vnet_name='aks'
aks_vnet_address='10.0.0.0/8'
aks1_system_subnet_name='Aks1Subnet'
aks1_system_subnet_address='10.241.0.0/16'
aks2_system_subnet_name='Aks2Subnet'
aks2_system_subnet_address='10.242.0.0/16'
aks_appgw_subnet_name='AppGwSubnet'
aks_appgw_subnet_address='10.2.1.0/24'
aks1_name='aks1'
aks2_name='aks2'

# resource group
echo -e "\e[1;36mCreating Resource Group $rg....\e[0m"
az group create --location $location -n $rg -o none

# AKS1 Identity
echo -e "\e[1;36mCreating Managed Identity $aks1_name-identity....\e[0m"
az identity create -g $rg -n $aks1_name-identity -o none
aks1_identity_id=$(az identity show -g $rg -n $aks1_name-identity --query id -o tsv)

# aks2 identity
echo -e "\e[1;36mCreating Managed Identity $aks2_name-identity....\e[0m"
az identity create -g $rg -n $aks2_name-identity -o none
aks2_identity_id=$(az identity show -g $rg -n $aks2_name-identity --query id -o tsv)

# vnets
echo -e "\e[1;36mCreating VNet $aks_vnet_name....\e[0m"
az network vnet create -g $rg -n $aks_vnet_name --address-prefixes $aks_vnet_address --subnet-name $aks1_system_subnet_name --subnet-prefixes $aks1_system_subnet_address -o none
az network vnet subnet create -g $rg -n $aks2_system_subnet_name --address-prefixes $aks2_system_subnet_address --vnet-name $aks_vnet_name -o none
az network vnet subnet create -g $rg -n $aks_appgw_subnet_name --address-prefixes $aks_appgw_subnet_address --vnet-name $aks_vnet_name -o none

# app gw
appgw_name="appgw"
echo -e "\e[1;36mCreating Application Gateway $appgw_name....\e[0m"
az network public-ip create -g $rg -n $appgw_name-pubip --allocation-method Static --sku Standard -o none
az network application-gateway create -n $appgw_name -g $rg --priority 10 --public-ip-address $appgw_name-pubip --sku Standard_v2 --vnet-name $aks_vnet_name --subnet $aks_appgw_subnet_name --no-wait

# log analytics
echo -e "\e[1;36mCreating Log Analytics Workspace $aks1_name-logAnalytics....\e[0m"
az monitor log-analytics workspace create -g $rg -n $aks1_name-logAnalytics -o none
log_analytics_ws_id=$(az monitor log-analytics workspace show -g $rg -n $aks1_name-logAnalytics --query id -o tsv)

sleep 45

# aks1 cluster
aks1_system_subnet_id=$(az network vnet subnet show -g $rg -n $aks1_system_subnet_name --vnet-name $aks_vnet_name --query id -o tsv)
echo -e "\e[1;36mCreating AKS Cluster $aks1_name....\e[0m"
az aks create -g $rg -n $aks1_name --node-count 1 --node-resource-group $rg-$aks1_name-nodes --enable-addons "monitoring" --workspace-resource-id $log_analytics_ws_id --network-plugin azure --assign-identity $aks1_identity_id --node-vm-size Standard_b2ms --vnet-subnet-id $aks1_system_subnet_id --service-cidr "10.0.0.0/16" --dns-service-ip "10.0.0.10" --docker-bridge-address "172.17.0.1/16" -o none

# aks2 cluster
aks2_system_subnet_id=$(az network vnet subnet show -g $rg -n $aks2_system_subnet_name --vnet-name $aks_vnet_name --query id -o tsv)
echo -e "\e[1;36mCreating AKS Cluster $aks2_name....\e[0m"
az aks create -g $rg -n $aks2_name --node-count 1 --node-resource-group $rg-$aks2_name-nodes --enable-addons "monitoring" --workspace-resource-id $log_analytics_ws_id --network-plugin azure --assign-identity $aks2_identity_id --node-vm-size Standard_b2ms --vnet-subnet-id $aks2_system_subnet_id --service-cidr "10.0.0.0/16" --dns-service-ip "10.0.0.10" --docker-bridge-address "172.17.0.1/16" -o none

# Aks1 Pod Identity
echo -e "\e[1;36mCreating Pod Identity for $aks1_name....\e[0m"
mgmt_idntity_name=$aks1_name-agic-pod-identity
az aks get-credentials -g $rg -n $aks1_name
# Create a managed identity 
az identity create -g $rg -n $mgmt_idntity_name -o none
# Obtain clientID for the new managed identity
identityClientId=$(az identity show -g $rg -n $mgmt_idntity_name --query clientId -o tsv)
# Obtain ResourceID for the new managed identity
identityResourceId=$(az identity show -g $rg -n $mgmt_idntity_name --query id -o tsv)
# Obtain the Subscription ID
subscriptionId=$(az account show --query 'id' -o tsv)
# Get the App Gateway ID 
AppgwID=$(az network application-gateway show -g $rg -n  $appgw_name --query id -o tsv)
# Obtain the AKS Node Pool Name
AKSNodePoolName=$(az aks nodepool list --cluster-name $aks1_name -g $rg --query '[].name' -o tsv)
# Obtain the AKS Node Pool ID
AKSNodePoolID=$(az aks nodepool show --cluster-name $aks1_name --name $AKSNodePoolName -g $rg --query 'id' -o tsv)
# Obtain the AKS Kubelet Identity ObjectId
kubeletidentityobjectId=$(az aks show -g $rg -n $aks1_name --query 'identityProfile.kubeletidentity.objectId' -o tsv)
# Obtain ResourceID for the Kubelet Identity
kubeletidentityResourceID=$(az aks show -g $rg -n $aks1_name --query 'identityProfile.kubeletidentity.resourceId' -o tsv)
# Obtain ClientID for the Kubelet Identity
kubeletidentityClientID=$(az aks show -g $rg -n $aks1_name --query 'identityProfile.kubeletidentity.clientId' -o tsv)
# Obtain the AKS Node Resource Group
AKSNodeRG=$(az aks list -g $rg --query '[0].nodeResourceGroup' -o tsv)
sleep 45
echo -e "\e[1;36mAssign Contributor role to $mgmt_idntity_name on $appgw_name AppGW and $aks1_name resources....\e[0m"
# Give the identity Contributor access to the Application Gateway
az role assignment create --role Contributor --assignee $identityClientId --scope $AppgwID -o none
# Get the Application Gateway resource group ID
ResourceGroupID=$(az group show -n $rg --query id -o tsv)
# Give the identity Reader access to the Application Gateway resource group
az role assignment create --role Contributor --assignee $identityClientId --scope $ResourceGroupID -o none
# Give the identity Contributor access to the Resource Group
az role assignment create --assignee $identityClientId --role "Contributor" --scope $ResourceGroupID -o none
# Give the identity Contributor access to the AKSNodePool
az role assignment create --assignee $identityClientId --role "Contributor" --scope $AKSNodePoolID -o none
# Assign the Kubelet Identity objectId contributor access to the AKS Node RG
az role assignment create --assignee $kubeletidentityobjectId --role "Contributor" --scope /subscriptions/$subscriptionId/resourceGroups/$AKSNodeRG -o none
# Assign the Kubelet Identity the Managed Identity Operator role on the new managed identity
az role assignment create --assignee $kubeletidentityobjectId --role "Managed Identity Operator" --scope $identityResourceId -o none
# Deploy an AAD pod identity in an RBAC-enabled cluster (comment line 62 if not using an RBAC-enabled cluster.)
echo -e "\e[1;36mDeploying an AAD pod identity in $aks1_name resources....\e[0m"
kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml

# Helm AGIC Configuration file
echo -e "\e[1;36mDownloading AGIC config file....\e[0m"
wget https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/docs/examples/sample-helm-config.yaml -O helm-agic-config.yaml
# Modifying the helm chart config file for AGIC#1
echo -e "\e[1;36mDeploying the AGIC Controller $appgw_name-agic ....\e[0m"
sed -i "/<subscriptionId>/ s//$subscriptionId/" helm-agic-config.yaml
sed -i "/<resourceGroupName>/ s//$rg/" helm-agic-config.yaml
sed -i "/<applicationGatewayName>/ s//$appgw_name/" helm-agic-config.yaml
sed -i "s|shared: false|shared: true|" helm-agic-config.yaml
sed -i "s|<identityResourceId>|${identityResourceId}|g" helm-agic-config.yaml
sed -i "/<identityClientId>/ s//$identityClientId/" helm-agic-config.yaml
sed -i -e "s|enabled: false # true/false|enabled: true # true/false|" helm-agic-config.yaml
# Installing Helm
echo -e "\e[1;36mInstalling Helm tool....\e[0m"
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod +x get_helm.sh
./get_helm.sh
# Adding AGIC helm repo
echo -e "\e[1;36mAdding AGIC Helm Repo....\e[0m"
helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
helm repo update
# Ensure the AzureIngressProhibitedTarget CRD is installed with:
echo -e "\e[1;36mEnsure the AzureIngressProhibitedTarget CRD is installed....\e[0m"
kubectl apply -f https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/crds/AzureIngressProhibitedTarget-v1-CRD-v1.yaml
# Deploying AGIC
echo -e "\e[1;36mDeploying $appgw_name-agic AppGW Ingress Controller to $aks1_name....\e[0m"
helm upgrade --install $appgw_name-agic -f helm-agic-config.yaml application-gateway-kubernetes-ingress/ingress-azure
# Confirm crd installation
kubectl get AzureIngressProhibitedTargets --all-namespaces
# delete first agic helm config file
rm helm-agic-config.yaml

# Aks2 Pod Identity
echo -e "\e[1;36mCreating Pod Identity for $aks2_name....\e[0m"
mgmt_idntity_name=$aks2_name-agic-pod-identity
az aks get-credentials -g $rg -n $aks2_name
# Create a managed identity 
az identity create -g $rg -n $mgmt_idntity_name -o none
# Obtain clientID for the new managed identity
identityClientId=$(az identity show -g $rg -n $mgmt_idntity_name --query clientId -o tsv)
# Obtain ResourceID for the new managed identity
identityResourceId=$(az identity show -g $rg -n $mgmt_idntity_name --query id -o tsv)
# Obtain the Subscription ID
subscriptionId=$(az account show --query 'id' -o tsv)
# Get the App Gateway ID 
AppgwID=$(az network application-gateway show -g $rg -n  $appgw_name --query id -o tsv)
# Obtain the AKS Node Pool Name
AKSNodePoolName=$(az aks nodepool list --cluster-name $aks2_name -g $rg --query '[].name' -o tsv)
# Obtain the AKS Node Pool ID
AKSNodePoolID=$(az aks nodepool show --cluster-name $aks2_name --name $AKSNodePoolName -g $rg --query 'id' -o tsv)
# Obtain the AKS Kubelet Identity ObjectId
kubeletidentityobjectId=$(az aks show -g $rg -n $aks2_name --query 'identityProfile.kubeletidentity.objectId' -o tsv)
# Obtain ResourceID for the Kubelet Identity
kubeletidentityResourceID=$(az aks show -g $rg -n $aks2_name --query 'identityProfile.kubeletidentity.resourceId' -o tsv)
# Obtain ClientID for the Kubelet Identity
kubeletidentityClientID=$(az aks show -g $rg -n $aks2_name --query 'identityProfile.kubeletidentity.clientId' -o tsv)
# Obtain the AKS Node Resource Group
AKSNodeRG=$(az aks list -g $rg --query '[1].nodeResourceGroup' -o tsv)
# wait for the identity to be replicated
sleep 45
echo -e "\e[1;36mAssign Contributor role to $mgmt_idntity_name on $appgw_name AppGW and $aks2_name resources....\e[0m"
# Give the identity Contributor access to the Application Gateway
az role assignment create --role Contributor --assignee $identityClientId --scope $AppgwID -o none
# Get the Application Gateway resource group ID
ResourceGroupID=$(az group show -n $rg --query id -o tsv)
# Give the identity Reader access to the Application Gateway resource group
az role assignment create --role Contributor --assignee $identityClientId --scope $ResourceGroupID -o none
# Give the identity Contributor access to the Resource Group
az role assignment create --assignee $identityClientId --role "Contributor" --scope $ResourceGroupID -o none
# Give the identity Contributor access to the AKSNodePool
az role assignment create --assignee $identityClientId --role "Contributor" --scope $AKSNodePoolID -o none
# Assign the Kubelet Identity objectId contributor access to the AKS Node RG
az role assignment create --assignee $kubeletidentityobjectId  --role "Contributor" --scope /subscriptions/$subscriptionId/resourceGroups/$AKSNodeRG -o none
# Assign the Kubelet Identity the Managed Identity Operator role on the new managed identity
az role assignment create --assignee $kubeletidentityobjectId  --role "Managed Identity Operator" --scope $identityResourceId -o none
# Deploy an AAD pod identity in an RBAC-enabled cluster (comment line 62 if not using an RBAC-enabled cluster.)
echo -e "\e[1;36mDeploying an AAD pod identity in $aks2_name resources....\e[0m"
kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml

# Helm AGIC Configuration file
echo -e "\e[1;36mDownloading AGIC config file....\e[0m"
wget https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/docs/examples/sample-helm-config.yaml -O helm-agic-config.yaml
# Modifying the helm chart config file for AGIC#1
echo -e "\e[1;36mDeploying the AGIC Controller $appgw_name-agic ....\e[0m"
sed -i "/<subscriptionId>/ s//$subscriptionId/" helm-agic-config.yaml
sed -i "/<resourceGroupName>/ s//$rg/" helm-agic-config.yaml
sed -i "/<applicationGatewayName>/ s//$appgw_name/" helm-agic-config.yaml
sed -i "s|shared: false|shared: true|" helm-agic-config.yaml
sed -i "s|<identityResourceId>|${identityResourceId}|g" helm-agic-config.yaml
sed -i "/<identityClientId>/ s//$identityClientId/" helm-agic-config.yaml
sed -i -e "s|enabled: false # true/false|enabled: true # true/false|" helm-agic-config.yaml
# Ensure the AzureIngressProhibitedTarget CRD is installed with:
echo -e "\e[1;36mEnsure the AzureIngressProhibitedTarget CRD is installed....\e[0m"
kubectl apply -f https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/crds/AzureIngressProhibitedTarget-v1-CRD-v1.yaml
# Deploying AGIC
echo -e "\e[1;36mDeploying $appgw_name-agic AppGW Ingress Controller to $aks2_name....\e[0m"
helm upgrade --install $appgw_name-agic -f helm-agic-config.yaml application-gateway-kubernetes-ingress/ingress-azure
# Confirm crd installation
kubectl get AzureIngressProhibitedTargets --all-namespaces

# Getting AppGW Public IP
appgw_pubip=$(az network public-ip show -g $rg -n $appgw_name-pubip --query ipAddress -o tsv) && echo "$appgw_name: $appgw_pubip"

# Preventing AGIC of AKS1 from removing the changes of AKS2 AGIC
echo -e "\e[1;36mPreventing AGIC of $aks1_name from removing the changes of $aks2_name AGIC....\e[0m"
az aks get-credentials -g $rg -n $aks1_name
cat <<EOF | kubectl apply -f -
apiVersion: "appgw.ingress.k8s.io/v1"
kind: AzureIngressProhibitedTarget
metadata:
  name: aks2prohibit
spec:
  hostname: aks2.$appgw_pubip.nip.io
EOF
# Confirm crd installation
kubectl get AzureIngressProhibitedTargets
# deletel broad:
kubectl delete AzureIngressProhibitedTarget prohibit-all-targets

# Preventing AGIC of AKS2 from removing the changes of AKS1 AGIC
echo -e "\e[1;36mPreventing AGIC of $aks2_name from removing the changes of $aks1_name AGIC....\e[0m"
az aks get-credentials -g $rg -n $aks2_name
cat <<EOF | kubectl apply -f -
apiVersion: "appgw.ingress.k8s.io/v1"
kind: AzureIngressProhibitedTarget
metadata:
  name: aks1prohibit
spec:
  hostname: aks1.$appgw_pubip.nip.io
EOF
# Confirm 
kubectl get AzureIngressProhibitedTargets
# delete broad
kubectl delete AzureIngressProhibitedTarget prohibit-all-targets
# delete first agic helm config file
rm helm-agic-config.yaml


#############################
# App 1  deployed to aks1   #
#############################
echo -e "\e[1;36mDeploying a service on $aks1_name with ingress....\e[0m"
az aks get-credentials -g $rg -n $aks1_name

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: aks1
  labels:
    app: aks1
spec:
  containers:
  - image: "mcr.microsoft.com/dotnet/samples:aspnetapp"
    name: aspnetapp-image
    ports:
    - containerPort: 80
      protocol: TCP
---

apiVersion: v1
kind: Service
metadata:
  name: aks1-svc
spec:
  selector:
    app: aks1
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aks1-ingress
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
spec:
  rules:
  - host: "aks1.$appgw_pubip.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aks1-svc
            port: 
              number: 80
EOF


sleep 10
# verify
kubectl get deployment,pod,svc,ingress


#############################
# App 2  deployed to aks2 #
#############################
echo -e "\e[1;36mDeploying a service on $aks2_name with ingress....\e[0m"
az aks get-credentials -g $rg -n $aks2_name

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: aks2
  labels:
    app: aks2
spec:
  containers:
  - image: "mcr.microsoft.com/dotnet/samples:aspnetapp"
    name: aspnetapp-image
    ports:
    - containerPort: 80
      protocol: TCP
---

apiVersion: v1
kind: Service
metadata:
  name: aks2-svc
spec:
  selector:
    app: aks2
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aks2-ingress
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
spec:
  rules:
  - host: "aks2.$appgw_pubip.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aks2-svc
            port: 
              number: 80
EOF

# verify
kubectl get deployment,pod,svc,ingress
sleep 45
echo -e "\n\nTry to access both http://nginx.$appgw_pubip.nip.io and http://httpd.$appgw_pubip.nip.io and confirm they both work!!"
