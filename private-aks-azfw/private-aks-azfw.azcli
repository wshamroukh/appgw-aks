# reference architecture https://docs.microsoft.com/en-us/azure/aks/limit-egress-traffic#deploy-a-public-service
# A private AKS behind Azure Firewall.

# Variables
rg='private-aks-azfw'
location='centralindia'
hub_vnet_name='hub'
hub_vnet_address='10.1.0.0/16'
hub_fw_subnet_name='AzureFirewallSubnet'
hub_fw_subnet_address='10.1.0.0/24'
aks_vnet_name='aks'
aks_vnet_address='10.0.0.0/16'
aks_system_subnet_name='SystemSubnet'
aks_system_subnet_address='10.0.0.0/21'
aks_user_subnet_name='UserSubnet'
aks_user_subnet_address='10.0.16.0/20'
aks_vm_subnet_name='VMSubnet'
aks_vm_subnet_address='10.0.8.0/21'
aks_name='akscluster'


# jump_init_file=jump_init.txt
# cat <<EOF > $jump_init_file
# #cloud-config
# runcmd:
#   - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
#   - apt-get update -y && apt-get dist-upgrade -y && apt autoremove -y
#   - sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl &&
#   - chmod +x ./kubectl &&
#   - mv ./kubectl /usr/local/bin/kubectl
#   - sudo curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &&
#   - chmod 700 get_helm.sh &&
#   - ./get_helm.sh
#   - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
# EOF

# resource group
echo -e "\e[1;36mCreating Resource Group $rg....\e[0m"
az group create --location $location -n $rg -o none

# AKS Managed Identity
az identity create -g $rg -n $aks_name-identity -o none
aks_identity_id=$(az identity show -g $rg -n $aks_name-identity --query id -o tsv | tr -d '\r')

# vnets
echo -e "\e[1;36mCreating VNet $hub_vnet_name....\e[0m"
az network vnet create -g $rg -n $hub_vnet_name --address-prefixes $hub_vnet_address --subnet-name $hub_fw_subnet_name --subnet-prefixes $hub_fw_subnet_address -o none
echo -e "\e[1;36mCreating VNet $aks_vnet_name....\e[0m"
az network vnet create -g $rg -n $aks_vnet_name --address-prefixes $aks_vnet_address --subnet-name $aks_system_subnet_name --subnet-prefixes $aks_system_subnet_address -o none
az network vnet subnet create -g $rg -n $aks_user_subnet_name --address-prefixes $aks_user_subnet_address --vnet-name $aks_vnet_name -o none
az network vnet subnet create -g $rg -n $aks_vm_subnet_name --address-prefixes $aks_vm_subnet_address --vnet-name $aks_vnet_name -o none

# vnet peering
echo -e "\e[1;36mCreating VNet Peering between $hub_vnet_name and $aks_vnet_name....\e[0m"
az network vnet peering create -g $rg -n to-$aks_vnet_name --remote-vnet $aks_vnet_name --vnet-name $hub_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none
az network vnet peering create -g $rg -n to-$hub_vnet_name --remote-vnet $hub_vnet_name --vnet-name $aks_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none

# log analytics
echo -e "\e[1;36mCreating Log Analytics Workspace $aks_name-logAnalytics....\e[0m"
az monitor log-analytics workspace create -g $rg -n $aks_name-logAnalytics -o none
log_analytics_ws_id=$(az monitor log-analytics workspace show -g $rg -n $aks_name-logAnalytics --query id -o tsv | tr -d '\r')

# aks cluster
admin_username=$(whoami)
echo -e "\e[1;36mCreating AKS Cluster $aks_name....\e[0m"
aks_system_subnet_id=$(az network vnet subnet show -g $rg -n $aks_system_subnet_name --vnet-name $aks_vnet_name --query id -o tsv | tr -d '\r')
aks_user_subnet_id=$(az network vnet subnet show -g $rg -n $aks_user_subnet_name --vnet-name $aks_vnet_name --query id -o tsv | tr -d '\r')
az aks create -g $rg -n $aks_name --enable-addons monitoring --workspace-resource-id $log_analytics_ws_id --enable-managed-identity --assign-identity $aks_identity_id --enable-private-cluster --nodepool-name systempool --node-vm-size Standard_B4als_v2 --generate-ssh-keys --admin-username $admin_username --docker-bridge-address "172.17.0.1/16" --network-plugin azure --vnet-subnet-id $aks_system_subnet_id --node-count 1 --service-cidr "10.2.0.0/24" --dns-service-ip "10.2.0.10" -o none
az aks command invoke -g $rg -n $aks_name --command "kubectl get pods -n kube-system"
az aks command invoke -g $rg -n $aks_name --command "kubectl get nodes -o wide"
az aks command invoke -g $rg -n $aks_name --command "kubectl create ns pets && kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-all-in-one.yaml -n pets"
az aks command invoke -g $rg -n $aks_name --command "kubectl get deployment,pod,svc,ingress -n pets -o wide"
webip=$(az aks command invoke -g $rg -n $aks_name --command "kubectl get -n pets service/store-front -o jsonpath='{.status.loadBalancer.ingress[*].ip}'" --query logs -o tsv | tr -d '\r') && echo Web App IP: $webip
adminip=$(az aks command invoke -g $rg -n $aks_name --command "kubectl get -n pets service/store-admin -o jsonpath='{.status.loadBalancer.ingress[*].ip}'" --query logs -o tsv | tr -d '\r') && echo Admin App IP: $adminip

echo -e "\e[1;36mAccess the following URL to browse the store app running on the AKS http://$webip ....\e[0m"
echo -e "\e[1;36mAccess the following URL to browse the store admin web app running on the AKS http://$adminip ....\e[0m"

# # user node pool
# echo -e "\e[1;36mAdding user node pool to AKS Cluster $aks_name....\e[0m"
# az aks nodepool add --cluster-name $aks_name -g $rg -n userpool --priority Spot --enable-cluster-autoscaler --min-count 1 --max-count 3 --max-pods 50 --node-vm-size Standard_B2s_v2 --vnet-subnet-id $aks_user_subnet_id --mode User -o none
# # Give AKS Managed Identity Access on the RG and Node RG
# identityClientId=$(az identity show -g $rg -n $aks_name-identity --query clientId -o tsv | tr -d '\r') && echo "Identity Client ID: $identityClientId"
# ResourceGroupID=$(az group show -n $rg --query id -o tsv | tr -d '\r') && echo "Resource Group ID: $ResourceGroupID"
# subscriptionId=$(az account show --query 'id' -o tsv | tr -d '\r') && echo "Subscription ID: $subscriptionId"
# AKSNodeRG=$(az aks list -g $rg --query '[0].nodeResourceGroup' -o tsv | tr -d '\r') && echo "AKS Node Resource Group: $AKSNodeRG"
# az role assignment create --assignee $identityClientId --role "Contributor" --scope $ResourceGroupID -o none
# az role assignment create --assignee $identityClientId  --role "Contributor" --scope /subscriptions/$subscriptionId/resourceGroups/$AKSNodeRG -o none

# # https://github.com/azure-samples/aks-store-demo/pkgs/container/aks-store-demo%2Forder-service
# ##ssh into the jump vm and run the following commands:
# echo -e "\e[1;36mSSH into jump box and then deploying an application into the AKS Cluster....\e[0m"
# username=$(whoami)
# echo -e "\e[1;36mLogin to your Azure Subscription where this environment was created....\e[0m"
# ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "az login"
# ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "az account set --subscription wshamrookh-plat-management"
# ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "az aks get-credentials -g $rg -n $aks_name"

# ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "kubectl create ns pets && kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-all-in-one.yaml -n pets"
# sleep 90
# ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "kubectl get deployment,pod,svc,ingress --all-namespaces -o wide"
# ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "kubectl delete deployment.apps/azure-vote-back deployment.apps/azure-vote-front service/azure-vote-back service/azure-vote-front"
# storeapp_ip=$(ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $jump_vm_pubip "kubectl get svc azure-vote-front -o jsonpath='{.status.loadBalancer.ingress[*].ip}'")


# azure firewall and policy
echo -e "\e[1;36mCreating Azure Firewall Policy....\e[0m"
azfw_policy_name=azfirewall-policy
az extension add -n azure-firewall
az extension update -n azure-firewall
az network firewall policy create -n $azfw_policy_name -g $rg -o none
# Azure Firewall Rule Collection Group
az network firewall policy rule-collection-group create -n AksEgressPolicyRuleCollectionGroup --policy-name $azfw_policy_name -g $rg --priority 500 -o none
# Azure Firewall Application Rules
az network firewall policy rule-collection-group collection add-filter-collection -g $rg -n AllowApplicationRules --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --action Allow --rule-name AllowAzureGlobalFQDNs --collection-priority 500 --rule-type ApplicationRule  --protocols https=443 --source-addresses "*" --target-fqdns "*.hcp.$location.azmk8s.io" "mcr.microsoft.com" "*.data.mcr.microsoft.com" "management.azure.com" "login.microsoftonline.com" "packages.microsoft.com" "acs-mirror.azureedge.net" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowOptRecomFQDNs --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols http=80 --source-addresses "*" --target-fqdns "security.ubuntu.com" "azure.archive.ubuntu.com" "nchangelogs.ubuntu.com" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowGPUFQDNs --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols https=443 --source-addresses "*" --target-fqdns "nvidia.github.io" "us.download.nvidia.com" "download.docker.com" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowReqWinCluster --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols http=80 https=443 --source-addresses "*" --target-fqdns "onegetcdn.azureedge.net" "go.microsoft.com" "*.mp.microsoft.com" "www.msftconnecttest.com" "ctldl.windowsupdate.com" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowDefender --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols https=443 --source-addresses "*" --target-fqdns "login.microsoftonline.com" "*.ods.opinsights.azure.com" "*.oms.opinsights.azure.com" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowCSISecretStore --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols https=443 --source-addresses "*" --target-fqdns "vault.azure.net	" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowAzurePolicy --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols https=443 --source-addresses "*" --target-fqdns "data.policy.core.windows.net" "store.policy.core.windows.net" "dc.services.visualstudio.com" -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n AllowClusterExtensions --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowApplicationRules --rule-type ApplicationRule --protocols https=443 --source-addresses '*' --target-fqdns "$location.dp.kubernetesconfiguration.azure.com" "mcr.microsoft.com" "*.data.mcr.microsoft.com" -o none
# Azure Firewall Network Rules
az network firewall policy rule-collection-group collection add-filter-collection -n AllowNetworkRules -g $rg --policy-name $azfw_policy_name --rcg-name AksEgressPolicyRuleCollectionGroup --action Allow  --rule-name AllowAzureGlobalUDP --collection-priority 400 --rule-type NetworkRule --source-addresses "*" --ip-protocols udp --destination-addresses "*" --destination-ports "1194" "123" "53" -o none
az network firewall policy rule-collection-group collection rule add -g $rg --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowNetworkRules -n AllowAzureGlobalTCP --rule-type NetworkRule --dest-addr "*" --destination-ports "9000" "443" --ip-protocols TCP --source-addresses "*" -o none
# Network rule to allow HTTP traffic to App running on AKS
az network firewall policy rule-collection-group collection rule add -g $rg --policy-name $azfw_policy_name --rule-collection-group-name AksEgressPolicyRuleCollectionGroup --collection-name AllowNetworkRules -n AllowHTTPTostoreApp --rule-type NetworkRule --dest-addr $aks_vnet_address --destination-ports 80 --ip-protocols TCP --source-addresses "*" -o none

echo -e "\e[1;36mCreating Azure Firewall ....\e[0m"
azfw_name='azfirewall'
az network public-ip create -n $azfw_name-pubip -g $rg --allocation-method static --sku standard -o none
az network firewall create -n $azfw_name -g $rg --sku AZFW_VNet --firewall-policy $azfw_policy_name --tier Premium -o none
azfw_id=$(az network firewall show -n $azfw_name -g $rg -o tsv --query id -o tsv | tr -d '\r')
az monitor diagnostic-settings create -n $azfw_name-logs --resource $azfw_id --workspace $log_analytics_ws_id --export-to-resource-specific true --logs '[{"category":"AZFWApplicationRule","Enabled":true}, {"category":"AZFWNetworkRule","Enabled":true}, {"category":"AZFWApplicationRuleAggregation","Enabled":true}, {"category":"AZFWDnsQuery","Enabled":true}, {"category":"AZFWFlowTrace","Enabled":true} , {"category":"AZFWIdpsSignature","Enabled":true}, {"category":"AZFWNatRule","Enabled":true}, {"category":"AZFWFatFlow","Enabled":true}, {"category":"AZFWNatRuleAggregation","Enabled":true}, {"category":"AZFWNetworkRuleAggregation","Enabled":true}, {"category":"AZFWThreatIntel","Enabled":true}]' -o none
az network firewall ip-config create --firewall-name $azfw_name -g $rg --vnet-name $hub_vnet_name --public-ip-address $azfw_name-pubip -n azfwconfig -o none
az network firewall update -n $azfw_name -g $rg -o none
hub_fw_private_ip=$(az network firewall show -g $rg -n $azfw_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo Hub FW private IP: $hub_fw_private_ip
hub_fw_public_ip=$(az network public-ip show -g $rg -n $azfw_name-pubip --query ipAddress -o tsv | tr -d '\r') && echo Hub FW public IP: $hub_fw_public_ip

# Add DNAT Rules to Allow HTTP traffic to the web app and admin app running on AKS
echo -e "\e[1;36mCreating a DNAT rule for the application running on the AKS Cluster ....\e[0m"
az network firewall policy rule-collection-group collection add-nat-collection -n NATRules -g $rg --policy-name $azfw_policy_name --rcg-name AksEgressPolicyRuleCollectionGroup --action DNAT --rule-name storeAppNAT --collection-priority 300 --source-addresses "*" --destination-addresses $hub_fw_public_ip --destination-ports 80 --translated-address $webip --translated-port 80 --ip-protocols tcp -o none
az network firewall policy rule-collection-group collection rule add -g $rg -n storeAdminAppNAT --policy-name $azfw_policy_name --collection-name NATRules --rcg-name AksEgressPolicyRuleCollectionGroup --rule-type NatRule --destination-addresses $hub_fw_public_ip --destination-ports 8080 --translated-address $adminip --translated-port 80 --ip-protocols tcp --source-addresses "*" -o none

# route table
echo -e "\e[1;36mCreating Route table and attach to AKS system and user subnets....\e[0m"
az network route-table create -g $rg -n $aks_name-route --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n ToAnything --route-table-name $aks_name-route --address-prefix 0.0.0.0/0 --next-hop-type VirtualAppliance --next-hop-ip-address $hub_fw_private_ip -o none
az network route-table route create -g $rg -n ToFW-PubIP --route-table-name $aks_name-route --address-prefix $hub_fw_public_ip/32 --next-hop-type Internet -o none
az network vnet subnet update -g $rg --vnet-name $aks_vnet_name -n $aks_system_subnet_name --route-table $aks_name-route -o none
az network vnet subnet update -g $rg --vnet-name $aks_vnet_name -n $aks_user_subnet_name --route-table $aks_name-route -o none

# message
echo -e "\e[1;36mAccess the following URL to browse the store app running on the AKS after routing the traffic through firewall: http://$hub_fw_public_ip/ ....\e[0m"
echo -e "\e[1;36mAccess the following URL to browse the store app running on the AKS after routing the traffic through firewall: http://$hub_fw_public_ip:8080/ ....\e[0m"

# Cleanup
# az group delete -g $rg --yes --no-wait -o none
