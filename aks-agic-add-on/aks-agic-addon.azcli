# A private AKS with Application Gateway Ingress Controller (AKS Add-On Greenfield Deployment) - AGIC add-on, AKS, and Application Gateway on blank-slate infrastructure.

# Variables
rg='aks-agic-addon'
location='centralindia'
aks_vnet_name='aks'
aks_vnet_address='10.0.0.0/8'
aks_system_subnet_name='AksSubnet'
aks_system_subnet_address='10.0.0.0/16'
aks_vm_subnet_name='VMSubnet'
aks_vm_subnet_address='10.2.0.0/24'
aks_appgw_subnet_name='AppGwSubnet'
aks_appgw_subnet_address='10.2.1.0/24'
aks_name='akscluster'

# resource group
echo -e "\e[1;36mCreating Resource Group $rg....\e[0m"
az group create --location $location -n $rg -o none

# AKS Managed Identity
echo -e "\e[1;36mCreating AKS Managed Identity $aks_name-identity....\e[0m"
az identity create -g $rg -n $aks_name-identity -o none
aks_identity_id=$(az identity show -g $rg -n $aks_name-identity --query id -o tsv | tr -d '\r')

# vnets
echo -e "\e[1;36mCreating VNet $aks_vnet_name....\e[0m"
az network vnet create -g $rg -n $aks_vnet_name --address-prefixes $aks_vnet_address --subnet-name $aks_system_subnet_name --subnet-prefixes $aks_system_subnet_address -o none
az network vnet subnet create -g $rg -n $aks_vm_subnet_name --address-prefixes $aks_vm_subnet_address --vnet-name $aks_vnet_name -o none
az network vnet subnet create -g $rg -n $aks_appgw_subnet_name --address-prefixes $aks_appgw_subnet_address --vnet-name $aks_vnet_name -o none

# app gw
appgw_name="aks-appgw"
echo -e "\e[1;36mCreating Application Gateway $appgw_name....\e[0m"
az network public-ip create -g $rg -n $appgw_name-pubip --allocation-method Static --sku Standard -o none
appgwpip=$(az network public-ip show -g $rg -n $appgw_name-pubip --query ipAddress -o tsv | tr -d '\r') && echo AppGW public IP: $appgwpip
az network application-gateway create -n $appgw_name -g $rg --capacity 1 --sku Standard_v2 --public-ip-address $appgw_name-pubip --sku Standard_v2 --vnet-name $aks_vnet_name --subnet $aks_appgw_subnet_name --priority 100 --no-wait

# log analytics
echo -e "\e[1;36mCreating Log Analytics Workspace $aks_name-logAnalytics....\e[0m"
az monitor log-analytics workspace create -g $rg -n $aks_name-logAnalytics -o none
log_analytics_ws_id=$(az monitor log-analytics workspace show -g $rg -n $aks_name-logAnalytics --query id -o tsv | tr -d '\r') && echo Log Analytics Workspace ID: $log_analytics_ws_id

# aks cluster
echo -e "\e[1;36mCreating AKS Cluster $aks_name....\e[0m"
az provider register --namespace Microsoft.ContainerService --wait
aks_system_subnet_id=$(az network vnet subnet show -g $rg -n $aks_system_subnet_name --vnet-name $aks_vnet_name --query id -o tsv | tr -d '\r')
az aks create -g $rg -n $aks_name --node-resource-group $rg-$aks_name-nodes --enable-addons "monitoring" --workspace-resource-id $log_analytics_ws_id --enable-managed-identity --assign-identity $aks_identity_id --enable-private-cluster --node-vm-size Standard_B4als_v2 --enable-cluster-autoscaler --min-count 1 --max-count 3 --max-pods 50 --network-plugin azure --vnet-subnet-id $aks_system_subnet_id --docker-bridge-address "172.17.0.1/16" --service-cidr "10.3.0.0/16" --dns-service-ip "10.3.0.10" -o none

# Enable ingress-appgw
echo -e "\e[1;36m\nEnabling ingress-appgw add-on on $aks_name....\e[0m"
appgwId=$(az network application-gateway show -n $appgw_name -g $rg -o tsv --query id -o tsv | tr -d '\r') && echo $appgwId
az aks enable-addons -n $aks_name -g $rg -a "ingress-appgw" --appgw-id $appgwId -o none

##########
# APP #1 #
##########
nginx_file=nginx.yaml
cat <<EOF > $nginx_file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
---

apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ing
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
spec:
  rules:
  - host: "nginx.$appgwpip.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-svc
            port: 
              number: 80
EOF

##########
# APP #2 #
##########
httpd_file=httpd.yaml
cat <<EOF > $httpd_file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd-deployment
  labels:
    app: httpd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpd
  template:
    metadata:
      labels:
        app: httpd
    spec:
      containers:
      - name: httpd
        image: httpd
        ports:
        - containerPort: 80
---

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: httpd
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: httpd-ing
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
spec:
  rules:
  - host: "httpd.$appgwpip.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: httpd-svc
            port: 
              number: 80
EOF

##ssh into the jump vm and run the following commands:
echo -e "\e[1;36mDeploying applications into the AKS Cluster....\e[0m"
az aks command invoke -g $rg -n $aks_name --command "kubectl get deployment,pod,svc,ingress --all-namespaces -o wide"
az aks command invoke -g $rg -n $aks_name --command "kubectl apply -f nginx.yaml" --file nginx.yaml
az aks command invoke -g $rg -n $aks_name --command "kubectl apply -f httpd.yaml" --file httpd.yaml
az aks command invoke -g $rg -n $aks_name --command "kubectl get deployment,pod,svc,ingress --all-namespaces -o wide"

# delete yaml files
rm $nginx_file $httpd_file
#
echo try to access now http://nginx.$appgwpip.nip.io and http://httpd.$appgwpip.nip.io

# Cleanup
# az group delete -g $rg --yes --no-wait -o none